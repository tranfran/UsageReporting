import sqlite3
from xlsxwriter.workbook import Workbook
from datetime import datetime
import calendar
import csv
import os
########################################################################
#Make path
# currentMonth = str(calendar.month_abbr[datetime.now().month].upper())
# currentMonth = str(calendar.month_abbr[5].upper())
currentMonth = str((calendar.month_abbr[datetime.now().month-1].upper()))
currentYear = str(datetime.now().year)
# path = r"C:\Users\csftn\USER_FRANCIS_TRAN\USAGE REPORT DATA\PREVIOUS MONTHS"
path = r"M:\8. Development\8. WIP Retail Services\Usage Report\SUPPLIER USAGE"
subpath = currentYear
subsubpath = currentMonth
if not os.path.exists(os.path.join(path, subpath)):
    os.mkdir(os.path.join(path, subpath))
if not os.path.exists(os.path.join(path, subpath, subsubpath)):
    os.mkdir(os.path.join(path, subpath, subsubpath))
savepath = os.path.join(path,subpath,subsubpath)
conn = sqlite3.connect('Database_UsageReport.db')
c = conn.cursor()
PartialMatch = r"C:\Users\csftn\USER_FRANCIS_TRAN\USAGE REPORT DATA\SQL DATA\Partial-match.csv"
with open(PartialMatch) as f:
    reader = csv.reader(f)
    for row in reader:
        Definition = str(row[0]).upper()
        Report_Name = str(row[1]).upper()
        c.execute('INSERT OR IGNORE INTO Partial_Translation(Partial_Definition,Report_Name) VALUES(?,?)', (Definition.strip(),Report_Name.strip()))

#Create Excel file from Data Table with REPORTS that require groupings
query = 'SELECT a.Report_Title, b.Partial_Definition from Data_Table a ' \
        'LEFT OUTER JOIN Partial_Translation b on ' \
        'b.Report_Name = a.Report_Title ' \
        'WHERE b.Partial_Definition is null or b.Partial_Definition = " "' \
        'group by a.Report_Title'
workbook = Workbook(savepath + '\\' + "Reports Requiring Definitions.xlsx")
worksheet = workbook.add_worksheet()
c.execute(query)
mysel = c.execute(query)
names = list(map(lambda x: x[0], mysel.description))
col = 0
for i in names:
    worksheet.write(0, col, i)
    col += 1
for i, row in enumerate(mysel):
    col = 0
    i += 1
    for j, value in enumerate(row):
        worksheet.write(i, col, row[j])
        col += 1
workbook.close()

###################################################################################
#Create Excel file from Data Table with UserIDs that require FirstName,LastName,Email
query = 'SELECT a.User_Id , b.First_Name , b.Last_Name , a.LDAP ' \
        'from Data_Table a ' \
        'LEFT OUTER JOIN User_ID b on b.User_ID = a.User_ID ' \
        'WHERE ifnull(length(b.First_Name), 0) = 0 ' \
        'group by a.User_ID'

workbook = Workbook(savepath + '\\' + "UserIds Requiring Names.xlsx")
worksheet = workbook.add_worksheet("Supplier IDs")
c.execute(query)
mysel = c.execute(query)
names = list(map(lambda x: x[0], mysel.description))
col = 0
for i in names:
    worksheet.write(0, col, i)
    col += 1
for i, row in enumerate(mysel):
    col = 0
    i += 1
    for j, value in enumerate(row):
        worksheet.write(i, col, row[j])
        col += 1
workbook.close()

conn.commit()
conn.close()
